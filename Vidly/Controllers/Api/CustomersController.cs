using AutoMapper;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Web.Http;
using Vidly.Dtos;
using Vidly.Models;

namespace Vidly.Controllers.Api
{
    public class CustomersController : ApiController
    {
        private ApplicationDbContext _context;

        public CustomersController()
        {
            _context = new ApplicationDbContext();
        }

        //Get /api/Customers
        //public IEnumerable<CustomerDto> GetCustomers()
        public IHttpActionResult GetCustomers()
        {
            var customerDtos = _context.Customers.ToList().Select(Mapper.Map<Customer, CustomerDto>);
            return Ok(customerDtos);
        }

        //Get /api/Customers/1
        public IHttpActionResult GetCustomers(int id)
        {
            var customer = _context.Customers.SingleOrDefault(c => c.Id == id);
            if (customer == null)
            {
                return NotFound();
                //throw new HttpResponseException(HttpStatusCode.NotFound);
            }

            return Ok(Mapper.Map<Customer, CustomerDto>(customer));
        }

        //Post /api/Customers
        [HttpPost]
        //resturn customer as a id will be generated by the sever so we need it
        //public CustomerDto CreateCustomer(CustomerDto customerDto)
        //Becasue in Resultfull convension our result should be of created 201
        //To have more control over our result we will use IhttpActionResult
        //Manly use of this to create reponse message after certain action
        //Like it is created its a bad resquest
        public IHttpActionResult CreateCustomer(CustomerDto customerDto)

        {
            if (!ModelState.IsValid)
            {
                return BadRequest();
                //throw new HttpResponseException(HttpStatusCode.BadRequest);
            }
            var customer = Mapper.Map<CustomerDto, Customer>(customerDto);
            _context.Customers.Add(customer);
            _context.SaveChanges();

            customerDto.Id = customer.Id;
            //id property will be set by the id generated from the database
            //return customerDto;
            //Return newly created customer address
            return Created(new Uri(Request.RequestUri + "/" + customer.Id), customerDto);
        }

        //Put /api/Customers/1
        [HttpPut]
        public IHttpActionResult UpdateCustomer(int id, CustomerDto customerDto)
        {
            if (!ModelState.IsValid)
            {
                //throw new HttpResponseException(HttpStatusCode.BadRequest);
                return BadRequest();
            }
            var customerinDb = _context.Customers.SingleOrDefault(c => c.Id == id);
            if (customerinDb == null)
            {
                //throw new HttpResponseException(HttpStatusCode.NotFound);
                return NotFound();
            }

            Mapper.Map(customerDto, customerinDb);

            //customerinDb.Name = customerDto.Name;
            //customerinDb.Birthdate = customerDto.Birthdate;
            //customerinDb.MembershipTypeId = customerDto.MembershipTypeId;
            //customerinDb.IsSubscribedToNewsletter = customerDto.IsSubscribedToNewsletter;
            _context.SaveChanges();

            return Ok();
        }

        //Delete /api/Customer/1
        [HttpDelete]
        public IHttpActionResult DeleteCustomer(int id)
        {
            var customerinDb = _context.Customers.SingleOrDefault(c => c.Id == id);
            if (customerinDb == null)
            {
                //throw new HttpResponseException(HttpStatusCode.NotFound);
                return NotFound();
            }
            _context.Customers.Remove(customerinDb);
            _context.SaveChanges();

            return Ok();
        }
    }
}